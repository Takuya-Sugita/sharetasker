<div class="main d-flex align-items-center task">
  <div class="container">
    <div class="card">
      <div class="card-body  d-flex align-items-center ">
        <%= form_with model: @post, url: posts_update_path, method: "post", local: true, class: "form", id: 'createPost', novalidate: true do |f| %>

          <h3 class="text-center text-info">TASKを編集</h3>

          <div class="form-group">
            <%= f.label "タイトル:", class: "text-info", for: "title" %>
            <%= f.text_field :title, name: "title", class: "form-control", id: "title", autofocus: true, autocomplete: "off", placeholder: "タイトル", maxlength: "20" , required: true%>
            <div class="invalid-feedback">
              タイトルを入力してください
            </div>
          </div>

          <div class="form-group">
            <%= f.label "概要 :", class: "text-info", for: "content" %>
            <%= f.text_area :content, name: "content", class: "form-control", id: "content", autocomplete: "off",  placeholder: "難易度も書き込んでください &#x203B;300字以内".html_safe, maxlength: "300" ,required: true %>
            <div class="invalid-feedback">
              概要を入力してください
            </div>
          </div>

          <div class="form-group">
            <%= f.label "期限 :", class: "text-info", for: "limitday" %>
            <div class="form-group">
              <div class="input-group date" id="limitday-picker" data-target-input="nearest">
                <%= f.text_field :limitday, name: "limitday", class: "form-control datetimepicker-input", id: "limitday", autocomplete: "off",  placeholder: "期限", data: {target: "#limitday-picker"}, required: true %>
                <div class="input-group-append" data-target="#limitday-picker" data-toggle="datetimepicker">
                  <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                </div>
                <div class="invalid-feedback">
                  期限を入力してください
                </div>
              </div>
            </div>
          </div>

          <div class="form-group">
            <%= f.label "場所 (任意) :", class: "text-info", for: "place" %>
            <%= f.text_field :place, name: "place", class: "form-control", id: "place", autocomplete: "off",  placeholder: "場所" %>
          </div>

          <div class="form-group">
            <%= f.label "縛り :", class: "text-info", for: "tie" %>
            <%= f.text_field :tie, name: "tie", class: "form-control", id: "tie", autocomplete: "off",  placeholder: "縛り" , required: true%>
            <div class="invalid-feedback">
              縛りを入力してください
            </div>
          </div>

          <div class="form-group">
            <%= f.label "画像 (任意):", class: "text-info" %>
            <div class="input-group">
              <div class="input-group-prepend">
                <span class="input-group-text">Upload</span>
              </div>
              <div class="custom-file">
                <%= f.file_field :file_name, name: "pimage", class: 'custom-file-input', accept: 'image/png, image/jpeg', id: "pimage" %>
                <label id="pimage-label" class="custom-file-label" for="pimage">画像を選択(4MBまで)</label>
              </div>
            </div>
          </div>

          <button type="button" class="btn btn-info btn-md" onclick="make_post()">編集</button>

        <% end %>
      </div>
    </div>
  </div>
</div>

<script>
    let limitday_format='YYYY-MM-DD HH:mm';

    // 画像の最大ファイルサイズ（4MB）
    let maxSize = 4 * 1024 * 1024;

    window.onload = function () {
        let limitday = $('#limitday');
        limitday.val( moment(limitday.val()).format(limitday_format) );
        document.getElementById("createPost").classList.remove("was-validated");

        $('#limitday-picker').datetimepicker({
            format: limitday_format
        });


        $('#pimage').on("change",function () {

            let files = this.files;

            if (files.length > 0) {
                // 選択されたファイル情報を取得
                let file = files[0];
                // readerのresultプロパティに、データURLとしてエンコードされたファイルデータを格納
                let reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onload = function() {

                    // 画像以外は無視 image/png, image/jpeg
                    if (!file ||
                        ( file.type !== 'image/png' && file.type !== 'image/jpeg' ) )
                    {
                        return;
                    }


                    // 指定したサイズを超える画像は無視
                    if (file.size > maxSize) {
                        return;
                    }

                    document.getElementById("pimage-label").innerText = file.name;
                }
            }
        });
    };


    function make_post() {
        let theme_form = document.getElementById("createPost");

        if(theme_form.checkValidity() === false){
            theme_form.classList.add("was-validated");
            return;
        }

        let limitday = $('#limitday');
        if(moment(limitday.val(),limitday_format).isValid() === false ){
            alert("記述するフォーマットに誤りがあります");
            return;
        }

        limitday.val( moment(limitday.val(),limitday_format).utc().format() );
        theme_form.submit();
    }
</script>